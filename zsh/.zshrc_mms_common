# not needed
# export TERM=xterm-256color

export EDITOR=vim
export VISUAL=vim

# Using yjit in ruby
export RUBY_YJIT_ENABLE=1
export RUBY_CONFIGURE_OPTS="--enable-yjit"

# Default configuration for less to avoid pages in different pages
export LESS="-F -R -X $LESS"

alias grep='grep --color=auto'
alias clear_vim='rm -f ~/.vim/tmp/*'
alias clear_history='echo "" > ~/.zsh_history & exec $SHELL -l'

alias push_tmp_github='. ~/.push_tmp_github.sh'

alias docker_stats='docker stats $(docker ps --format={{.Names}})'
alias docker_stop='docker stop $(docker ps -a -q)'
alias docker_rm='docker rm $(docker ps -a -q)'
alias docker_clean='docker system prune --all --volumes && docker volume rm $(docker volume ls -q)'
alias portainer='docker run --rm --label service=portainer -p 9000:9000 --name portainer -v /var/run/docker.sock:/var/run/docker.sock -v ~/.config/portainer:/data portainer/portainer -l service=portainer --no-auth'
alias wtf_git='git reset --hard && git clean -xdf'
alias python_server='python3 -m http.server 8000'
alias aws_login='aws sso login --no-browser && echo as:; aws sts get-caller-identity && echo docker login:; aws ecr get-login-password | docker login --username AWS --password-stdin 522104923602.dkr.ecr.eu-west-1.amazonaws.com'
alias git_fetch_all='git fetch --all --prune --tags --prune-tags --force'

setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS

eval "$(rbenv init -)"

# ~/.oh-my-zsh/theme/robbyrussell.zsh-theme
# PROMPT="%{$fg_bold[orange]%} [%{$fg_bold[green]%}%D{%f/%m/%y}|%*%{$fg_bold[yellow]%}]"
# PROMPT+=' %{$fg[cyan]%}%~%{$reset_color%} $(git_prompt_info)'
# ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}(%{$fg[red]%}"

# # Init - Adding last command time
# function preexec() {
#   timer=${timer:-$SECONDS}
# }

# Init - Used for agnoster theme
# function precmd() {
#   if [ $timer ]; then
#     timer_show=$(($SECONDS - $timer))
#     if [[ $timer_show -ge $min_show_time ]]; then
#       RPROMPT='%{$fg_bold[red]%}(${timer_show}s)%f%{$fg_bold[white]%}[%*]%f'
#     else
#       RPROMPT='%{$fg_bold[white]%}[%*]%f'
#     fi
#     unset timer
#   fi
# }
# autoload -Uz add-zsh-hook
# add-zsh-hook preexec preexec
# add-zsh-hook precmd precmd
# # End - Adding last command time


# # Init - Adding emoji icon
# prompt_context(){}
# prompt_context() {
#   # Custom (Random emoji)
#   emojis=("💩" "🤡" "👹" "👺" "👻" "👽" "👾" "🤖" "🙈" "🙉" "🙊" "💃" "🍺" "🍻" "🥂" "🥃" "🍸" "🏟" "🎱" "⚡️" "🔥" "💀" "👑" "😎" "🐸" "🦄" "🍻" "🚀" "💡" "🎉" "🔑" "🚦" "🌙")

#   RAND_EMOJI_N=$(( $RANDOM % ${#emojis[@]} + 1))
#   prompt_segment black default "${emojis[$RAND_EMOJI_N]}"
# }
# # End - Adding emoji icon
# End - Used for agnoster theme

### Fix slowness of pastes with zsh-syntax-highlighting.zsh
# https://github.com/zsh-users/zsh-syntax-highlighting/issues/513#issuecomment-545493062
# Maybe now it's fixed... check it
# pasteinit() {
#   OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
#   zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
# }

# pastefinish() {
#   zle -N self-insert $OLD_SELF_INSERT
# }
# zstyle :bracketed-paste-magic paste-init pasteinit
# zstyle :bracketed-paste-magic paste-finish pastefinish
### Fix slowness of pastes

# Using in the VM
# source ~/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

# Using installed with brew
source "$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "$HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
source "$HOMEBREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme"

if [ -f ~/.secrets ]; then
  if [[ $(uname) == "Darwin" ]]; then
    export $(grep -v '^#' ~/.secrets | xargs -0)
  else
    export $(grep -v '^#' ~/.secrets | xargs -d '\n')
  fi
fi
